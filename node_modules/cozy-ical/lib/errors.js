// Generated by CoffeeScript 1.9.0
var FieldConflictError, FieldDependencyError, InvalidValueError, MissingFieldError,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

module.exports.MissingFieldError = MissingFieldError = (function(_super) {
  __extends(MissingFieldError, _super);

  function MissingFieldError(field) {
    this.name = 'MissingFieldError';
    this.message = "Mandatory field `" + field + "` is missing";
    Error.captureStackTrace(this, arguments.callee);
  }

  return MissingFieldError;

})(Error);

module.exports.FieldConflictError = FieldConflictError = (function(_super) {
  __extends(FieldConflictError, _super);

  function FieldConflictError(field1, field2) {
    this.name = 'FieldConflictError';
    this.message = "Fields `" + field1 + "` and `" + field2 + "` can't be both present";
    Error.captureStackTrace(this, arguments.callee);
  }

  return FieldConflictError;

})(Error);

module.exports.FieldDependencyError = FieldDependencyError = (function(_super) {
  __extends(FieldDependencyError, _super);

  function FieldDependencyError(field1, field2) {
    this.name = 'FieldDependencyError';
    this.message = ("Field `" + field1 + "` is missing and `" + field2 + "` requires ") + "it to exist";
    Error.captureStackTrace(this, arguments.callee);
  }

  return FieldDependencyError;

})(Error);

module.exports.InvalidValueError = InvalidValueError = (function(_super) {
  __extends(InvalidValueError, _super);

  function InvalidValueError(field, value, expected) {
    this.name = 'InvalidValueError';
    this.message = ("Field `" + field + "` has value \"" + value + "\", expected ") + ("value to be in " + (expected.join(', ')));
    Error.captureStackTrace(this, arguments.callee);
  }

  return InvalidValueError;

})(Error);
