// Generated by CoffeeScript 1.9.0
var FieldConflictError, FieldDependencyError, ICalParser, InvalidValueError, MissingFieldError, RRule, VALID_TZ_LIST, VAlarm, VCalendar, VComponent, VDaylight, VEvent, VFreeBusy, VJournal, VStandard, VTimezone, VTodo, byline, extend, fs, helpers, iCalBuffer, moment, stream, uuid, _ref,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

fs = require('fs');

moment = require('moment-timezone');

byline = require('byline');

stream = require('stream');

extend = require('extend');

uuid = require('uuid');

RRule = require('rrule').RRule;

VALID_TZ_LIST = moment.tz.names();

_ref = require('./errors'), MissingFieldError = _ref.MissingFieldError, FieldConflictError = _ref.FieldConflictError, FieldDependencyError = _ref.FieldDependencyError, InvalidValueError = _ref.InvalidValueError;

helpers = require('./helpers');

module.exports.decorateEvent = require('./event');

iCalBuffer = (function() {
  function iCalBuffer() {}

  iCalBuffer.prototype.txt = '';

  iCalBuffer.prototype.addString = function(text) {
    return this.txt += text;
  };

  iCalBuffer.prototype.addStrings = function(texts) {
    var text, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = texts.length; _i < _len; _i++) {
      text = texts[_i];
      _results.push(this.addString(text));
    }
    return _results;
  };

  iCalBuffer.prototype.addLine = function(text) {
    return this.addString(text + "\r\n");
  };

  iCalBuffer.prototype.addLines = function(texts) {
    var text, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = texts.length; _i < _len; _i++) {
      text = texts[_i];
      _results.push(this.addLine(text));
    }
    return _results;
  };

  iCalBuffer.prototype.toString = function() {
    return this.txt;
  };

  return iCalBuffer;

})();

module.exports.VComponent = VComponent = (function() {
  VComponent.prototype.name = 'VCOMPONENT';

  VComponent.icalDTUTCFormat = 'YYYYMMDD[T]HHmmss[Z]';

  VComponent.icalDTFormat = 'YYYYMMDD[T]HHmmss';

  VComponent.icalDateFormat = 'YYYYMMDD';

  function VComponent(options) {
    this.model = extend(true, {}, options);
    this.subComponents = [];
    this.rawFields = [];
    if (options != null) {
      this.validate();
      this.build();
    }
  }

  VComponent.prototype.validate = function() {};

  VComponent.prototype.build = function() {
    return this.rawFields = [];
  };

  VComponent.prototype.extract = function() {
    return this.model = {};
  };

  VComponent.prototype.toString = function() {
    var buf;
    buf = new iCalBuffer;
    buf.addLine("BEGIN:" + this.name);
    this._toStringFields(buf);
    this._toStringComponents(buf);
    return buf.addString("END:" + this.name);
  };

  VComponent.prototype._toStringFields = function(buf) {
    var details, field, _i, _len, _ref1, _results;
    _ref1 = this.rawFields;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      field = _ref1[_i];
      details = "";
      if (typeof field.details === 'string' && field.details.length > 0) {
        details += field.details;
      } else if (field.details instanceof Array && field.details.length > 0) {
        details += ';' + field.details.join(';');
      }
      if (field.value != null) {
        _results.push(buf.addLine("" + field.key + details + ":" + field.value));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  VComponent.prototype._toStringComponents = function(buf) {
    var component, _i, _len, _ref1, _results;
    _ref1 = this.subComponents;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      component = _ref1[_i];
      _results.push(buf.addLine(component.toString()));
    }
    return _results;
  };

  VComponent.prototype.add = function(component) {
    if (component != null) {
      return this.subComponents.push(component);
    }
  };

  VComponent.prototype.walk = function(walker) {
    var sub, _i, _len, _ref1, _results;
    walker(this);
    _ref1 = this.subComponents;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      sub = _ref1[_i];
      _results.push(sub.walk(walker));
    }
    return _results;
  };

  VComponent.prototype.addRawField = function(key, value, details) {
    if (details == null) {
      details = {};
    }
    return this.rawFields.push({
      key: key,
      value: value,
      details: details
    });
  };

  VComponent.prototype.addTextField = function(key, value, details) {
    if (details == null) {
      details = {};
    }
    return this.addRawField(key, helpers.escapeText(value), details);
  };

  VComponent.prototype.getRawField = function(key, findMany) {
    var defaultResult, field, _i, _len, _ref1;
    if (findMany == null) {
      findMany = false;
    }
    defaultResult = findMany ? [] : null;
    _ref1 = this.rawFields;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      field = _ref1[_i];
      if (field.key === key) {
        if (findMany) {
          defaultResult.push(field);
        } else {
          if (field.key) {
            return field;
          }
        }
      }
    }
    return defaultResult;
  };

  VComponent.prototype.getRawValue = function(key, findMany) {
    var fields;
    if (findMany == null) {
      findMany = false;
    }
    fields = this.getRawField(key, findMany);
    if (findMany) {
      return fields.map(field(function() {
        return typeof field !== "undefined" && field !== null ? field.value : void 0;
      }));
    } else {
      return fields != null ? fields.value : void 0;
    }
  };

  VComponent.prototype.getTextFieldValue = function(key, defaults) {
    var field, value;
    field = this.getRawField(key, false);
    value = helpers.unescapeText(field != null ? field.value : void 0);
    return value || defaults;
  };

  return VComponent;

})();

module.exports.VCalendar = VCalendar = (function(_super) {
  __extends(VCalendar, _super);

  VCalendar.prototype.name = 'VCALENDAR';

  function VCalendar(options) {
    VCalendar.__super__.constructor.apply(this, arguments);
    this.vtimezones = {};
  }

  VCalendar.prototype.validate = function() {
    if (this.model.organization == null) {
      throw new MissingFieldError('organization');
    }
    if (this.model.title == null) {
      throw new MissingFieldError('title');
    }
  };

  VCalendar.prototype.build = function() {
    var prodid;
    VCalendar.__super__.build.call(this);
    prodid = "-//" + this.model.organization + "//NONSGML " + this.model.title + "//EN";
    this.addRawField('VERSION', '2.0');
    this.addRawField('PRODID', prodid);
    if (this.model.method != null) {
      this.addRawField('METHOD', this.model.method);
    }
    if (this.model.name) {
      return this.addTextField('X-WR-CALNAME', this.model.name);
    }
  };

  VCalendar.prototype.extract = function() {
    var extractPRODID, method, name, organization, prodId, results, title, value, _;
    VCalendar.__super__.extract.call(this);
    prodId = this.getRawField('PRODID');
    if (prodId) {
      value = prodId.value;
      extractPRODID = /-\/\/([\w. ]+)\/\/?(?:NONSGML )?(.+)\/\/.*/;
      results = value.match(extractPRODID);
    }
    if (results != null) {
      _ = results[0], organization = results[1], title = results[2];
    } else {
      organization = 'Undefined organization';
      title = 'Undefined title';
    }
    name = this.getTextFieldValue('X-WR-CALNAME');
    method = this.getTextFieldValue('METHOD') || null;
    return this.model = {
      organization: organization,
      title: title,
      name: name,
      method: method
    };
  };

  VCalendar.prototype.addTimezone = function(timezone) {
    if (this.vtimezones[timezone] == null) {
      return this.vtimezones[timezone] = new VTimezone(moment(), timezone);
    }
  };

  VCalendar.prototype.toString = function() {
    var buf, vtimezone, _, _ref1;
    buf = new iCalBuffer;
    buf.addLine("BEGIN:" + this.name);
    this._toStringFields(buf);
    _ref1 = this.vtimezones;
    for (_ in _ref1) {
      vtimezone = _ref1[_];
      buf.addLine(vtimezone.toString());
    }
    this._toStringComponents(buf);
    return buf.addString("END:" + this.name);
  };

  return VCalendar;

})(VComponent);

module.exports.VAlarm = VAlarm = (function(_super) {
  __extends(VAlarm, _super);

  function VAlarm() {
    return VAlarm.__super__.constructor.apply(this, arguments);
  }

  VAlarm.prototype.name = 'VALARM';

  VAlarm.EMAIL_ACTION = 'EMAIL';

  VAlarm.DISPLAY_ACTION = 'DISPLAY';

  VAlarm.AUDIO_ACTION = 'AUDIO';

  VAlarm.prototype.validate = function() {
    var expected;
    if (this.model.action == null) {
      throw new MissingFieldError('action');
    }
    if (this.model.trigger == null) {
      throw new MissingFieldError('trigger');
    }
    if ((this.model.duration != null) && (this.model.repeat == null)) {
      throw new FieldDependencyError('duration', 'repeat');
    } else if ((this.model.duration == null) && (this.model.repeat != null)) {
      throw new FieldDependencyError('repeat', 'duration');
    }
    if (this.model.action === VAlarm.DISPLAY_ACTION) {
      if (this.model.description == null) {
        throw new MissingFieldError('description');
      }
    } else if (this.model.action === VAlarm.EMAIL_ACTION) {
      if (this.model.description == null) {
        throw new MissingFieldError('description');
      }
      if (this.model.summary == null) {
        throw new MissingFieldError('summary');
      }
      if (this.model.attendees == null) {
        throw new MissingFieldError('attendees');
      }
    } else if (this.model.action === VAlarm.AUDIO_ACTION) {

    } else {
      expected = [VAlarm.DISPLAY_ACTION, VAlarm.EMAIL_ACTION, VAlarm.AUDIO_ACTION];
      throw new InvalidValueError('action', this.model.action, expected);
    }
  };

  VAlarm.prototype.build = function() {
    var attendee, details, fieldValue, name, status, _i, _len, _ref1, _ref2, _ref3;
    VAlarm.__super__.build.call(this);
    this.addRawField('ACTION', this.model.action);
    this.addRawField('TRIGGER', this.model.trigger);
    if (this.model.attendees) {
      _ref1 = this.model.attendees;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        attendee = _ref1[_i];
        status = ((_ref2 = attendee.details) != null ? _ref2.status : void 0) || 'NEEDS-ACTION';
        details = ";PARTSTAT=" + status;
        name = ((_ref3 = attendee.details) != null ? _ref3.name : void 0) || attendee.email;
        details += ";CN=" + name;
        fieldValue = "mailto:" + attendee.email;
        this.addRawField("ATTENDEE", fieldValue, details);
      }
    }
    this.addTextField('DESCRIPTION', this.model.description);
    this.addRawField('DURATION', this.model.duration || null);
    this.addRawField('REPEAT', this.model.repeat || null);
    return this.addTextField('SUMMARY', this.model.summary);
  };

  VAlarm.prototype.extract = function() {
    var action, attendees, description, expected, summary, trigger, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    VAlarm.__super__.extract.call(this);
    trigger = ((_ref1 = this.getRawField('TRIGGER')) != null ? _ref1.value : void 0) || null;
    description = this.getTextFieldValue('DESCRIPTION');
    attendees = this.getRawField('ATTENDEE', true);
    attendees = attendees != null ? attendees.map(function(attendee) {
      var detail, details, email, key, name, status, _i, _len, _ref2, _ref3, _ref4, _ref5;
      email = attendee.value.replace('mailto:', '');
      if (((_ref2 = attendee.details) != null ? _ref2.length : void 0) > 0) {
        details = {};
        _ref3 = attendee.details;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          detail = _ref3[_i];
          if (detail.indexOf('PARTSTAT') !== -1) {
            _ref4 = detail.split('='), key = _ref4[0], status = _ref4[1];
            details.status = status;
          } else if (detail.indexOf('CN') !== -1) {
            _ref5 = detail.split('='), key = _ref5[0], name = _ref5[1];
            details.name = name;
          }
        }
      } else {
        details = {
          status: 'NEEDS-ACTION',
          name: email
        };
      }
      return {
        email: email,
        details: details
      };
    }) : void 0;
    summary = this.getTextFieldValue('SUMMARY');
    expected = [VAlarm.DISPLAY_ACTION, VAlarm.EMAIL_ACTION, VAlarm.AUDIO_ACTION];
    action = (_ref2 = this.getRawField('ACTION')) != null ? _ref2.value : void 0;
    if (__indexOf.call(expected, action) < 0) {
      action = VAlarm.DISPLAY_ACTION;
      if (description == null) {
        description = (_ref3 = this.parent) != null ? _ref3.getTextFieldValue('SUMMARY', '') : void 0;
      }
    } else if (action === VAlarm.DISPLAY_ACTION) {
      if (description == null) {
        description = (_ref4 = this.parent) != null ? _ref4.getTextFieldValue('SUMMARY', '') : void 0;
      }
    } else if (action === VAlarm.EMAIL_ACTION) {
      if (description == null) {
        description = (_ref5 = this.parent) != null ? _ref5.getTextFieldValue('DESCRIPTION', '') : void 0;
      }
      if (summary == null) {
        summary = (_ref6 = this.parent) != null ? _ref6.getTextFieldValue('SUMMARY', '') : void 0;
      }
      if (attendees == null) {
        attendees = [];
      }
    }
    return this.model = {
      action: action,
      trigger: trigger,
      attendees: attendees,
      description: description,
      repeat: ((_ref7 = this.getRawField('REPEAT')) != null ? _ref7.value : void 0) || null,
      summary: summary
    };
  };

  return VAlarm;

})(VComponent);

module.exports.VTodo = VTodo = (function(_super) {
  __extends(VTodo, _super);

  function VTodo() {
    return VTodo.__super__.constructor.apply(this, arguments);
  }

  VTodo.prototype.name = 'VTODO';

  VTodo.prototype.validate = function() {
    if (this.model.uid == null) {
      throw new MissingFieldError('uid');
    }
    if (this.model.stampDate == null) {
      throw new MissingFieldError('stampDate');
    }
    if ((this.model.due != null) && (this.model.duration != null)) {
      throw new FieldConflictError('due', 'duration');
    }
    if ((this.model.duration != null) && (this.model.startDate == null)) {
      throw new FieldDependencyError('startDate', 'duration');
    }
  };

  VTodo.prototype.build = function() {
    var formattedStartDate, stampDate, startDate;
    VTodo.__super__.build.call(this);
    stampDate = moment.tz(this.model.stampDate, 'UTC');
    this.addRawField('UID', this.model.uid);
    this.addRawField('DTSTAMP', stampDate.format(VEvent.icalDTUTCFormat));
    if (this.model.startDate != null) {
      startDate = moment(this.model.startDate);
      formattedStartDate = startDate.format(VTodo.icalDTUTCFormat);
    }
    this.addTextField('DESCRIPTION', this.model.description || null);
    this.addRawField('DTSTART', formattedStartDate || null);
    this.addRawField('DUE', this.model.due || null);
    this.addRawField('DURATION', this.model.duration || null);
    return this.addTextField('SUMMARY', this.model.summary || null);
  };

  VTodo.prototype.extract = function() {
    var details, due, duration, stampDate, startDate, timezone, _, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    VTodo.__super__.extract.call(this);
    stampDate = ((_ref1 = this.getRawField('DTSTAMP')) != null ? _ref1.value : void 0) || moment().tz('UTC');
    startDate = (_ref2 = this.getRawField('DTSTART')) != null ? _ref2.value : void 0;
    due = (_ref3 = this.getRawField('DUE')) != null ? _ref3.value : void 0;
    duration = (_ref4 = this.getRawField('DURATION')) != null ? _ref4.value : void 0;
    if ((due != null) && (duration != null)) {
      duration = null;
    }
    if (startDate != null) {
      details = this.getRawField('DTSTART').details;
      if (details.length > 0) {
        _ref5 = details[0].split('='), _ = _ref5[0], timezone = _ref5[1];
        if (__indexOf.call(VALID_TZ_LIST, timezone) < 0) {
          timezone = 'UTC';
        }
      } else {
        timezone = 'UTC';
      }
      startDate = moment.tz(startDate, VTodo.icalDTUTCFormat, timezone);
    }
    if (startDate == null) {
      startDate = moment.tz(moment(), 'UTC');
    }
    return this.model = {
      uid: ((_ref6 = this.getRawField('UID')) != null ? _ref6.value : void 0) || uuid.v1(),
      stampDate: moment.tz(stampDate, VTodo.icalDTUTCFormat, 'UTC').toDate(),
      description: this.getTextFieldValue('DESCRIPTION', ''),
      startDate: startDate.toDate(),
      due: due,
      duration: duration,
      summary: this.getTextFieldValue('SUMMARY', ''),
      timezone: timezone
    };
  };

  VTodo.prototype.addAlarm = function(options) {
    return this.add(new VAlarm(options));
  };

  return VTodo;

})(VComponent);

module.exports.VEvent = VEvent = (function(_super) {
  __extends(VEvent, _super);

  function VEvent() {
    return VEvent.__super__.constructor.apply(this, arguments);
  }

  VEvent.prototype.name = 'VEVENT';

  VEvent.prototype.validate = function() {
    if (this.model.uid == null) {
      throw new MissingFieldError('uid');
    }
    if (this.model.stampDate == null) {
      throw new MissingFieldError('stampDate');
    }
    if (this.model.startDate == null) {
      throw new MissingFieldError('startDate');
    }
    if ((this.model.endDate != null) && (this.model.duration != null)) {
      throw new FieldConflictError('endDate', 'duration');
    }
  };

  VEvent.prototype.build = function() {
    var attendee, created, details, fieldEnd, fieldStart, formatEnd, formatStart, lastModification, mozLastack, name, organizer, organizerEmail, rrule, stampDate, status, timezoneEnd, timezoneStart, _i, _len, _ref1, _ref2, _ref3, _ref4;
    VEvent.__super__.build.call(this);
    if ((this.model.endDate == null) && (this.model.duration == null) && (this.model.rrule == null)) {
      this.model.endDate = moment(this.model.startDate).add(1, 'd').toDate();
    }
    fieldStart = "DTSTART";
    fieldEnd = "DTEND";
    formatStart = null;
    formatEnd = null;
    timezoneStart = null;
    timezoneEnd = null;
    if (this.model.allDay) {
      fieldStart += ";VALUE=DATE";
      fieldEnd += ";VALUE=DATE";
      formatStart = formatEnd = VEvent.icalDateFormat;
    } else if (this.model.rrule != null) {
      formatStart = formatEnd = VEvent.icalDTFormat;
      timezoneStart = timezoneEnd = this.model.timezone;
    } else {
      if (this.model.timezone && this.model.timezone !== 'UTC') {
        formatStart = formatEnd = VEvent.icalDTFormat;
        timezoneStart = timezoneEnd = this.model.timezone;
      } else {
        if (this.model.startDate.getTimezone != null) {
          formatStart = VEvent.icalDTFormat;
          timezoneStart = this.model.startDate.getTimezone();
        } else {
          formatStart = VEvent.icalDTUTCFormat;
        }
        if (this.model.endDate.getTimezone != null) {
          formatEnd = VEvent.icalDTFormat;
          timezoneEnd = this.model.startDate.getTimezone();
        } else {
          formatEnd = VEvent.icalDTUTCFormat;
        }
      }
    }
    if (timezoneStart != null) {
      fieldStart += ";TZID=" + timezoneStart;
    }
    if (timezoneEnd != null) {
      fieldEnd += ";TZID=" + timezoneEnd;
    }
    if (this.model.rrule != null) {
      delete this.model.rrule.dtstart;
      rrule = new RRule(this.model.rrule).toString();
    }
    stampDate = moment(this.model.stampDate).tz('UTC');
    this.addRawField('UID', this.model.uid);
    this.addRawField('DTSTAMP', stampDate.format(VEvent.icalDTUTCFormat));
    this.addRawField(fieldStart, moment(this.model.startDate).format(formatStart));
    if (this.model.endDate != null) {
      this.addRawField(fieldEnd, moment(this.model.endDate).format(formatEnd));
    }
    if (this.model.attendees != null) {
      _ref1 = this.model.attendees;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        attendee = _ref1[_i];
        status = ((_ref2 = attendee.details) != null ? _ref2.status : void 0) || 'NEEDS-ACTION';
        details = ";PARTSTAT=" + status;
        name = ((_ref3 = attendee.details) != null ? _ref3.name : void 0) || attendee.email;
        details += ";CN=" + name;
        this.addRawField("ATTENDEE" + details, "mailto:" + attendee.email);
      }
    }
    if (this.model.lastModification != null) {
      lastModification = moment.tz(this.model.lastModification, 'UTC').format(VEvent.icalDTUTCFormat);
    }
    if (this.model.created != null) {
      created = moment.tz(this.model.created, 'UTC').format(VEvent.icalDTUTCFormat);
    }
    if (this.model.mozLastack != null) {
      mozLastack = moment.tz(this.model.mozLastack, 'UTC').format(VEvent.icalDTUTCFormat);
    }
    this.addRawField('CATEGORIES', this.model.categories || null);
    this.addRawField('CREATED', created || null);
    this.addTextField('DESCRIPTION', this.model.description || null);
    this.addRawField('DURATION', this.model.duration || null);
    this.addRawField('LAST-MODIFIED', lastModification || null);
    this.addTextField('LOCATION', this.model.location || null);
    if (((_ref4 = this.model.organizer) != null ? _ref4.displayName : void 0) != null) {
      organizerEmail = this.model.organizer.email;
      details = ";CN=" + this.model.organizer.displayName;
    } else if (this.model.organizer != null) {
      organizerEmail = this.model.organizer;
      details = "";
    }
    if (organizerEmail != null) {
      organizer = "mailto:" + organizerEmail;
      this.addRawField("ORGANIZER" + details, organizer || null);
    }
    this.addRawField('RRULE', rrule || null);
    this.addTextField('SUMMARY', this.model.summary || null);
    return this.addRawField('X-MOZ-LASTACK', mozLastack || null);
  };

  VEvent.prototype.extract = function(defaultTimezone) {
    var allDay, attendees, created, daysNum, dtend, dtstart, duration, endDate, error, hoursNum, iCalFormat, lastModification, minutesNum, mozLastack, rrule, rruleOptions, secondsNum, stampDate, startDate, timezone, timezoneEnd, timezoneInfos, timezoneStart, uid, weeksNum, _, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    iCalFormat = 'YYYYMMDDTHHmmss';
    uid = this.getRawField('UID');
    stampDate = ((_ref1 = this.getRawField('DTSTAMP')) != null ? _ref1.value : void 0) || moment();
    dtstart = this.getRawField('DTSTART');
    if (dtstart != null) {
      startDate = dtstart.value;
      if (((_ref2 = dtstart.details) != null ? _ref2.length : void 0) > 0) {
        if (dtstart.details[0] === 'VALUE=DATE') {
          timezoneStart = 'UTC';
          allDay = true;
        } else if (dtstart.details[0] === 'VALUE=DATE-TIME') {
          timezoneInfos = dtstart.details[1];
          if (timezoneInfos != null) {
            _ref3 = dtstart.details[1].split('='), _ = _ref3[0], timezoneStart = _ref3[1];
            if (__indexOf.call(VALID_TZ_LIST, timezoneStart) < 0) {
              timezoneStart = 'UTC';
            }
          } else {
            timezoneStart = 'UTC';
          }
        } else {
          _ref4 = dtstart.details[0].split('='), _ = _ref4[0], timezoneStart = _ref4[1];
          if (__indexOf.call(VALID_TZ_LIST, timezoneStart) < 0) {
            timezoneStart = 'UTC';
          }
        }
      } else {
        if (dtstart.value.length === 15) {
          timezoneStart = defaultTimezone;
        } else {
          timezoneStart = 'UTC';
        }
      }
    } else {
      startDate = moment.tz(moment(), 'UTC').format(iCalFormat);
      timezoneStart = 'UTC';
    }
    dtend = this.getRawField('DTEND');
    endDate = (dtend != null ? dtend.value : void 0) || null;
    duration = ((_ref5 = this.getRawField('DURATION')) != null ? _ref5.value : void 0) || null;
    if ((endDate != null) && (duration != null)) {
      duration = null;
    } else if ((endDate == null) && (duration == null)) {
      endDate = moment.tz(startDate, iCalFormat, timezoneStart).add(1, 'd').toDate();
    } else if ((endDate == null) && (duration != null)) {
      weeksNum = helpers.iCalDurationToUnitValue(duration, 'W');
      daysNum = helpers.iCalDurationToUnitValue(duration, 'D');
      hoursNum = helpers.iCalDurationToUnitValue(duration, 'H');
      minutesNum = helpers.iCalDurationToUnitValue(duration, 'M');
      secondsNum = helpers.iCalDurationToUnitValue(duration, 'S');
      endDate = moment.tz(startDate, iCalFormat, timezoneStart);
      endDate = endDate.add(weeksNum, 'w').add(daysNum, 'd').add(hoursNum, 'h').add(minutesNum, 'm').add(secondsNum, 's').toDate();
      duration = null;
    } else if (endDate != null) {
      if (((_ref6 = dtend.details) != null ? _ref6.length : void 0) > 0) {
        if (dtend.details[0] === 'VALUE=DATE') {
          timezoneEnd = 'UTC';
        } else if (dtend.details[0] === 'VALUE=DATE-TIME') {
          timezoneInfos = dtend.details[1];
          if (timezoneInfos != null) {
            _ref7 = dtend.details[1].split('='), _ = _ref7[0], timezoneEnd = _ref7[1];
            if (__indexOf.call(VALID_TZ_LIST, timezoneEnd) < 0) {
              timezoneEnd = 'UTC';
            }
          } else {
            timezoneEnd = 'UTC';
          }
        } else {
          _ref8 = dtend.details[0].split('='), _ = _ref8[0], timezoneEnd = _ref8[1];
          if (__indexOf.call(VALID_TZ_LIST, timezoneEnd) < 0) {
            timezoneEnd = 'UTC';
          }
        }
      } else {
        if (dtend.value.length === 15) {
          timezoneEnd = defaultTimezone;
        } else {
          timezoneEnd = 'UTC';
        }
      }
      endDate = moment.tz(endDate, iCalFormat, timezoneEnd).toDate();
    }
    rrule = (_ref9 = this.getRawField('RRULE')) != null ? _ref9.value : void 0;
    if (rrule != null) {
      if (timezoneStart !== 'UTC') {
        timezone = timezoneStart;
      }
      try {
        rrule = rrule.split(';').map(function(part) {
          var dateSection, hasZAtTheEnd, isDateTime, isUntil, _ref10;
          isUntil = part.indexOf('UNTIL') !== -1;
          if (isUntil) {
            _ref10 = part.split('='), _ = _ref10[0], dateSection = _ref10[1];
            isDateTime = dateSection.indexOf('T') !== -1;
            hasZAtTheEnd = part[part.length - 1] === 'Z';
            if (isDateTime && !hasZAtTheEnd) {
              part += 'Z';
            }
          }
          return part;
        }).join(';');
        rruleOptions = RRule.parseString(rrule);
      } catch (_error) {
        error = _error;
        console.log('RRule threw an error...');
        console.log(error);
      }
    }
    attendees = this.getRawField('ATTENDEE', true);
    attendees = attendees != null ? attendees.map(function(attendee) {
      var detail, details, email, key, name, status, _i, _len, _ref10, _ref11, _ref12, _ref13;
      email = attendee.value.replace('mailto:', '');
      if (((_ref10 = attendee.details) != null ? _ref10.length : void 0) > 0) {
        details = {};
        _ref11 = attendee.details;
        for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
          detail = _ref11[_i];
          if (detail.indexOf('PARTSTAT') !== -1) {
            _ref12 = detail.split('='), key = _ref12[0], status = _ref12[1];
            details.status = status;
          } else if (detail.indexOf('CN') !== -1) {
            _ref13 = detail.split('='), key = _ref13[0], name = _ref13[1];
            details.name = name;
          }
        }
      } else {
        details = {
          status: 'NEEDS-ACTION',
          name: email
        };
      }
      return {
        email: email,
        details: details
      };
    }) : void 0;
    lastModification = (_ref10 = this.getRawField('LAST-MODIFIED')) != null ? _ref10.value : void 0;
    if (lastModification != null) {
      lastModification = moment.tz(lastModification, VEvent.icalDTUTCFormat, 'UTC').toISOString();
    }
    created = (_ref11 = this.getRawField('CREATED')) != null ? _ref11.value : void 0;
    if (created != null) {
      created = moment.tz(created, VEvent.icalDTUTCFormat, 'UTC').toISOString();
    }
    mozLastack = this.getRawValue('X-MOZ-LASTACK');
    if (mozLastack != null) {
      mozLastack = moment.tz(mozLastack, VEvent.icalDTUTCFormat, 'UTC').toISOString();
    }
    return this.model = {
      uid: (uid != null ? uid.value : void 0) || uuid.v1(),
      stampDate: moment.tz(stampDate, VEvent.icalDTUTCFormat, 'UTC').toDate(),
      startDate: moment.tz(startDate, iCalFormat, timezoneStart).toDate(),
      endDate: endDate,
      duration: duration,
      attendees: attendees,
      categories: ((_ref12 = this.getRawField('CATEGORIES')) != null ? _ref12.value : void 0) || null,
      description: this.getTextFieldValue('DESCRIPTION', null),
      location: this.getTextFieldValue('LOCATION', null),
      organizer: ((_ref13 = this.getRawField('ORGANIZER')) != null ? _ref13.value : void 0) || null,
      rrule: rruleOptions || null,
      summary: this.getTextFieldValue('SUMMARY', null),
      allDay: allDay || null,
      timezone: timezone || null,
      lastModification: lastModification || null,
      created: created || null,
      mozLastack: mozLastack
    };
  };

  return VEvent;

})(VComponent);

module.exports.VTimezone = VTimezone = (function(_super) {
  __extends(VTimezone, _super);

  VTimezone.prototype.name = 'VTIMEZONE';

  function VTimezone(options) {
    var diff, tzurl, vdaylight, vstandard;
    VTimezone.__super__.constructor.apply(this, arguments);
    if (!options) {
      return this;
    }
    tzurl = "http://tzurl.org/zoneinfo/" + options.timezone + ".ics";
    this.rawFields = [
      {
        key: 'TZID',
        value: options.timezone
      }, {
        key: 'TZURL',
        value: tzurl
      }
    ];
    diff = moment.tz(options.startDate, options.timezone).format('ZZ');
    vstandard = new VStandard(options.startDate, diff, diff);
    this.add(vstandard);
    vdaylight = new VDaylight(options.startDate, diff, diff);
    this.add(vdaylight);
  }

  return VTimezone;

})(VComponent);

module.exports.VJournal = VJournal = (function(_super) {
  __extends(VJournal, _super);

  function VJournal() {
    return VJournal.__super__.constructor.apply(this, arguments);
  }

  VJournal.prototype.name = 'VJOURNAL';

  return VJournal;

})(VComponent);

module.exports.VFreeBusy = VFreeBusy = (function(_super) {
  __extends(VFreeBusy, _super);

  function VFreeBusy() {
    return VFreeBusy.__super__.constructor.apply(this, arguments);
  }

  VFreeBusy.prototype.name = 'VFREEBUSY';

  return VFreeBusy;

})(VComponent);

module.exports.VStandard = VStandard = (function(_super) {
  __extends(VStandard, _super);

  VStandard.prototype.name = 'STANDARD';

  function VStandard(options) {
    var dtstart;
    VStandard.__super__.constructor.apply(this, arguments);
    if (!options) {
      return this;
    }
    dtstart = moment(options.startDate).format(VStandard.icalDTFormat);
    this.rawFields = [
      {
        key: 'DTSTART',
        value: dtstart
      }, {
        key: 'TZOFFSETFROM',
        value: options.startShift
      }, {
        key: 'TZOFFSETTO',
        value: options.endShift
      }
    ];
  }

  return VStandard;

})(VComponent);

module.exports.VDaylight = VDaylight = (function(_super) {
  __extends(VDaylight, _super);

  VDaylight.prototype.name = 'DAYLIGHT';

  function VDaylight(options) {
    var dtstart;
    VDaylight.__super__.constructor.apply(this, arguments);
    if (!options) {
      return this;
    }
    dtstart = moment(options.startDate).format(VDaylight.icalDTFormat);
    this.rawFields = [
      {
        key: 'DTSTART',
        value: dtstart
      }, {
        key: 'TZOFFSETFROM',
        value: options.startShift
      }, {
        key: 'TZOFFSETTO',
        value: options.endShift
      }
    ];
  }

  return VDaylight;

})(VComponent);

module.exports.ICalParser = ICalParser = (function() {
  function ICalParser() {}

  ICalParser.components = {
    VTODO: VTodo,
    VALARM: VAlarm,
    VEVENT: VEvent,
    VJOURNAL: VJournal,
    VFREEBUSY: VFreeBusy,
    VTIMEZONE: VTimezone,
    STANDARD: VStandard,
    DAYLIGHT: VDaylight
  };

  ICalParser.prototype.parseFile = function(file, options, callback) {
    if (arguments.length < 3) {
      callback = options;
      this.defaultTimezone = 'UTC';
    } else {
      this.defaultTimezone = options.defaultTimezone || 'UTC';
    }
    return this.parse(fs.createReadStream(file), callback);
  };

  ICalParser.prototype.parseString = function(string, options, callback) {
    var fakeStream;
    if (arguments.length < 3) {
      callback = options;
      this.defaultTimezone = 'UTC';
    } else {
      this.defaultTimezone = options.defaultTimezone || 'UTC';
    }
    fakeStream = new stream.Readable();
    fakeStream._read = function() {};
    this.parse(fakeStream, callback);
    fakeStream.push(string);
    return fakeStream.push(null);
  };

  ICalParser.prototype.parse = function(stream, callback) {
    var completeLine, component, createComponent, lineNumber, lineParser, noerror, parent, result, sendError;
    stream = byline(stream);
    result = {};
    noerror = true;
    lineNumber = 0;
    component = null;
    parent = null;
    completeLine = null;
    stream.on('end', function() {
      if (completeLine) {
        lineParser(completeLine);
      }
      if (noerror) {
        return callback(null, result);
      }
    });
    sendError = function(msg) {
      if (noerror) {
        callback(new Error(msg + " (line " + lineNumber + ")"));
      }
      return noerror = false;
    };
    createComponent = function(name) {
      parent = component;
      if (name === "VCALENDAR") {
        if (result.fields != null) {
          sendError("Cannot parse more than one calendar");
        }
        component = new VCalendar();
        result = component;
      } else if (__indexOf.call(Object.keys(ICalParser.components), name) >= 0) {
        component = new ICalParser.components[name]();
      } else {
        sendError("Malformed ical file");
      }
      if (component != null) {
        component.parent = parent;
      }
      return parent != null ? parent.add(component) : void 0;
    };
    lineParser = (function(_this) {
      return function(line) {
        var detail, details, key, pname, pvalue, tuple, value, _i, _len, _ref1, _ref2, _results;
        tuple = line.trim().split(':');
        if (tuple.length < 2) {
          return sendError("Malformed ical file");
        } else {
          key = tuple.shift();
          value = tuple.join(':');
          if (key === "BEGIN") {
            return createComponent(value);
          } else if (key === "END") {
            component.extract(_this.defaultTimezone);
            return component = component.parent;
          } else if (!((component != null) || (result != null))) {
            return sendError("Malformed ical file");
          } else if ((key != null) && key !== '' && (component != null)) {
            _ref1 = key.split(';'), key = _ref1[0], details = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
            component.addRawField(key, value, details);
            _results = [];
            for (_i = 0, _len = details.length; _i < _len; _i++) {
              detail = details[_i];
              _results.push((_ref2 = detail.split('='), pname = _ref2[0], pvalue = _ref2[1], _ref2));
            }
            return _results;
          } else {
            return sendError("Malformed ical file");
          }
        }
      };
    })(this);
    return stream.on('data', function(line) {
      stream.pause();
      lineNumber++;
      line = line.toString('utf-8').replace("\r", '');
      if (line === '' || line === '0') {
        return stream.resume();
      }
      if (line[0] === ' ') {
        completeLine += line.substring(1);
      } else {
        if (completeLine) {
          lineParser(completeLine);
        }
        completeLine = line;
      }
      return stream.resume();
    });
  };

  return ICalParser;

})();
